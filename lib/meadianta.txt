static Future<List<Map<String, dynamic>>> getClients() async {
    final db = await DbLite.database();
    const myquery = """select *  from POS_CUSTOMERS""";
    return db.rawQuery(myquery);
  }

this.pvp1,
this.pvp2,
this.pvp3,
this.pvp4,
this.pvp5,
this.pvp6,
this.pvp7,
this.pvp8,
this.size,
this.unit_per_box,
this.disc1_max,
this.disc2_max,
this.disc3_max,
this.price_min,
this.disc1_table,
this.disc2_table,
this.disc3_table,
this.disc4_table,
this.disc5_table,
this.disc6_table,
this.disc7_table,
this.disc8_table,
this.gross_weight,
this.net_weight,
this.iaba_sell,
this.pvp1_iva,
this.pvp2_iva,
this.pvp3_iva,
this.pvp4_iva,
this.pvp5_iva,
this.pvp6_iva,
this.pvp7_iva,
this.pvp8_iva,
this.pos_products_id,
this.salesup_id,
this.edit_name,
this.sync_ok,
this.manages_stock,
this.sell_negative_stock,
this.is_container,
this.variation,
this.is_sogenave,
this.conv_boxes,
this.controla_lote,
this.rastreabilidade,
this.casas_decimais_qtd,
this.produz_so_com_encomenda,
this.code,
this.name,
this.slogan,
this.codseg1,
this.codseg2,
this.codseg3,
this.codseg4,
this.codseg5,
this.codseg6,
this.iva,
this.selling_unit,
this.url,
this.image_file,
this.html_details,
this.provider_code,
this.buying_unit,
this.membersprice,
this.is_reduction,
this.defprod1,
this.defprod2,
this.unidade_cap,
this.name2,
